# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WPVCB6S5QHqC1nYdjrgMHteorzlWa4PF
"""

!pip install ultralytics

import gradio as gr
import cv2
import json
import numpy as np
from ultralytics import YOLO

# Load model
model = YOLO("best.pt")

# Load reference data (avg_area + calorie_dict)
with open("food_reference.json", "r") as f:
    food_reference = json.load(f)

avg_area = food_reference["avg_area"]
calorie_dict = food_reference["calorie_dict"]

# 3. Define prediction function
def predict(image):
    # Run inference
    results = model.predict(image)

    # Load image for drawing
    img = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)

    detections = []
    for box, cls, conf in zip(results[0].boxes.xyxy, results[0].boxes.cls, results[0].boxes.conf):
        label = results[0].names[int(cls)]
        confidence = float(conf)

        x1, y1, x2, y2 = map(int, box[:4])
        detected_area = (x2 - x1) * (y2 - y1)

        base_cal = calorie_dict.get(label, 0)
        ref_area = avg_area.get(label, 1)

        calories = base_cal * (detected_area / ref_area)

        # Save detection info
        detections.append({
            "dish": label,
            "confidence": round(confidence, 2),
            "detected_area": detected_area,
            "avg_area": ref_area,
            "calories": round(calories, 1)
        })

        # Draw only bounding box + label
        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(img, f"{label} {confidence:.2f}", (x1, y1 - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    # Convert back to RGB for Gradio
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    return img_rgb, detections

# 4. Build Gradio Interface
with gr.Blocks() as demo:
    gr.Markdown("# üçõ Indian Food Calorie Estimator")
    gr.Markdown("Upload an image of Indian food. The model will detect dishes and estimate calories.")

    with gr.Row():
        with gr.Column():
            input_img = gr.Image(type="pil", label="Upload Image")
            run_btn = gr.Button("üîç Detect & Estimate Calories")

        with gr.Column():
            output_img = gr.Image(type="numpy", label="Detected Image")
            output_json = gr.JSON(label="Detection Results (with Calories)")

    run_btn.click(
        fn=predict,
        inputs=input_img,
        outputs=[output_img, output_json]
    )

# 5. Launch app
if __name__ == "__main__":
    demo.launch()

